services:
  kafka:
    image: confluentinc/cp-kafka
    healthcheck:
      test: [ "CMD-SHELL", "kafka-cluster cluster-id --bootstrap-server localhost:9092" ]
      interval: 2s
      timeout: 10s
      retries: 30
      start_period: 5s
    environment:
      KAFKA_KRAFT_MODE: "true"  # This enables KRaft mode in Kafka.
      KAFKA_PROCESS_ROLES: controller,broker  # Kafka acts as both broker and controller.
      KAFKA_NODE_ID: 1  # A unique ID for this Kafka instance.
      CLUSTER_ID: 'kafka-terraform-provider-cluster-ci-1'
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@localhost:9093"  # Defines the controller voters.
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.5
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:9200/_cluster/health | grep -q '\"status\":\"green\"\\|\"status\":\"yellow\"'"]
      interval: 2s
      timeout: 10s
      retries: 30
      start_period: 5s
    environment:
      discovery.type: single-node
      cluster.routing.allocation.disk.threshold_enabled: "false"
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: "-Xms256m -Xmx256m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 127.27.27.27:9200:9200

  kestra:
    image: ghcr.io/kestra-io/kestra-ee:v0.24.1
    # it may be easier to use gcp registry in local
#    image: europe-west1-docker.pkg.dev/kestra-host/docker/kestra-ee:v0.24.1
    command: server standalone
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8080/health"]
      interval: 2s
      timeout: 30s
      retries: 30
      start_period: 5s
    volumes:
      - ./.github/docker/application.yml:/app/confs/application.yml:ro
      - ./.github/docker/application-secrets.yml:/app/secrets/application-secrets.yml:ro
    environment:
      MICRONAUT_CONFIG_FILES: /app/confs/application.yml,/app/secrets/application-secrets.yml

    ports:
      - 127.27.27.27:8080:8080
      - 8088:8080 # allowing to run tests in local
    links:
      - kafka
      - vault
    depends_on:
      kafka:
        condition: service_healthy
      vault:
        condition: service_healthy

  vault:
    image: hashicorp/vault
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: [ "CMD-SHELL", "vault status -format=json | grep '\"initialized\": true'" ]
      interval: 2s
      timeout: 10s
      retries: 30
      start_period: 5s
    environment:
      VAULT_ADDR: http://localhost:8200
      VAULT_API_ADDR: http://localhost:8200
      VAULT_TOKEN: my-vault-root-token
      VAULT_LOG_LEVEL: DEBUG
      VAULT_DEV_ROOT_TOKEN_ID: my-vault-root-token
